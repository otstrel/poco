//
// Schema.h
//
// $Id$
//
// Library: JSON
// Package: JSON
// Module:  Schema
//
// Definition of the Schema class.
//
// Copyright (c) 2012, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef JSON_JSONSchema_INCLUDED
#define JSON_JSONSchema_INCLUDED


#include "Poco/JSON/JSON.h"
#include "Poco/JSON/Object.h"
#include "Poco/JSON/Array.h"
#include "Poco/JSON/Handler.h"
#include "Poco/Dynamic/Var.h"


namespace Poco {
namespace JSON {


class JSON_API Schema
	/// A class for JSON schema validation.
{
public:

	Schema();
		/// Constructor.

	virtual ~Schema();
		/// Destructor.

	bool add(const std::string &name, const Object::Ptr &obj);
		/// Add schema definition. Returns true if schema was added and syntax is correct.

	bool isComplete(const std::string &name);
		/// Check whether all schemata referenced in <name> were added.

	size_t numSchemata()
	{
		return _schemata.size();
	}

private:

	struct PropertyDefinition
	{
		bool optional;
		std::string type;
		std::string validation;
		std::string comments;
	};

	std::map<std::string, Object> _schemata;

	bool checkSyntax(const Object::Ptr &obj);

	bool parseDefinition(const std::string &defString, PropertyDefinition &defStruct);
};


}} // namespace Poco::JSON


#endif // JSON_JSONSchema_INCLUDED
