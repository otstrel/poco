//
// Schema.cpp
//
// $Id$
//
// Library: JSON
// Package: JSON
// Module:  Schema
//
// Copyright (c) 2012, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/JSON/Schema.h"
#include "Poco/JSON/JSONException.h"
#include "Poco/RegularExpression.h"

namespace Poco {
namespace JSON {

Schema::Schema()
{

}

Schema::~Schema()
{

}

bool Schema::add(const std::string &name, const Object::Ptr &obj)
{
	if (name.length()==0)
		return false;

	if (checkSyntax(obj)==false)
		return false;

	_schemata[name]=*obj;

	return true;
}

bool Schema::isComplete(const std::string &name)
{
	return false;
}

bool Schema::checkSyntax(const Object::Ptr &obj)
{
	if (obj->size()==0)
		return false; // Schema does not contain any definitions

	std::vector<std::string> properties;
	obj->getNames(properties);

	for(size_t i=0;i<properties.size();i++)
	{
		if (obj->isObject(properties[i]))
		{
			if(checkSyntax(obj->getObject(properties[i]))==false)
				return false;
		}
		else 
		{
			std::string defString;

			if (obj->isArray(properties[i]))
			{
				Array::Ptr a=obj->getArray(properties[i]);

				if(a->size()!=1)
					return false; // Array definition must contain only one element

				defString=a->getElement<std::string>(0);
			}
			else
				defString=obj->getValue<std::string>(properties[i]);


			PropertyDefinition defStruct;

			if(!parseDefinition(defString, defStruct))
				return false;
		}
	}

	return true;
}

bool Schema::parseDefinition(const std::string &defString, PropertyDefinition &defStruct)
{
	std::string pattern="^(optional)?(?:\\s+)?(\\w+)(?:\\s+)?(?:\\((\\w+)?\\))?(?:\\s*\\#(.+))?$";

	Poco::RegularExpression re(pattern);

	Poco::RegularExpression::MatchVec m;

	if (re.match(defString, 0, m)<3)
		return false;

	defStruct.optional=false;
	defStruct.type="";
	defStruct.validation="";
	defStruct.comments="";

	if (m[1].offset!=std::string::npos)
		defStruct.optional=true;

	if (m[2].offset!=std::string::npos)
		defStruct.type=defString.substr(m[2].offset, m[2].length);

	if (m.size()>=4 && m[3].offset!=std::string::npos)
		defStruct.validation=defString.substr(m[3].offset, m[3].length);

	if (m.size()>=5 && m[4].offset!=std::string::npos)
		defStruct.comments=defString.substr(m[4].offset, m[4].length);

	return true;
}

} } // namespace Poco::JSON
